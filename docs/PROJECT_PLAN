# LimitlessOS V2.0 — Security-First, Production-Grade Transformation Program Owner: LimitlessOS-official Scope: Transform LimitlessOS into a production-grade, hybrid kernel OS superior in Security, Performance, and Stability to Windows 11 24H2, macOS Sequoia, and Ubuntu 24.10. ## 0. Principles and Guardrails - Security-first: Minimal privileged code, W^X everywhere, strict MAC and sandboxing, signed modules, measured boot. - Hybrid kernel: Protected modular services with message passing, capability-based handles. - Completeness rule: No stubs, placeholders, TODOs, or partial implementations in mainline. - Reproducible builds: Hermetic toolchains, SBOM, signed artifacts, bit-for-bit ISO reproducibility. - Hardware adaptive: x86-64 primary, x86 compatibility path; feature gating (SMEP/SMAP/UMIP/CET/PCID/x2APIC). - Evidence-based: Every milestone has measurable acceptance and verification gates. ## 1. Milestones and Deliverables ### M0 — Repo Sanitation & Build Integrity - Remove all stubs/placeholders (e.g., userspace/action_card_stub.c). - Consolidate to kernel/production_linker.ld. - Hermetic Docker build; SBOM; signing; SOURCE_DATE_EPOCH; reproducible ISO. - Deliverables: - Clean repo (no stubs), deterministic builds, CI for release+sanitizer builds. - Acceptance: - Bit-for-bit reproducible kernel+ISO from clean environment. - CI green, SBOM generated, signatures verified. ### M1 — Boot & CPU Baseline - Long mode path and 32-bit compat; IRQ stacks; hardened ISR prologues/epilogues. - Feature gating: SMEP/SMAP/UMIP/CET-SS/PCID/x2APIC; IBRS/IBPB/STIBP toggles. - Acceptance: - Boots on x86-64, x86; W^X, SMEP/SMAP verified; no IRQ storm panics. ### M2 — VMM & Allocators - 5-level paging (fallback 4L), large pages for specific sections. - Buddy + slab allocators (per-CPU magazines, freelist randomization, guard pages). - KPTI; execute-only text (where feasible); EPT/NPT hooks. - Acceptance: - Stress allocators pass with no leaks; KASAN/UBSAN clean (test build). ### M3 — MAC, Capabilities, Sandbox - Label-based MAC for tasks, IPC, vnodes/inodes, devices, sockets, shared mem, VM regions. - Capability handles; sandbox profiles; brokered access to FS/net/devices. - Signed modules; read-only-after-init; TPM2 measured boot. - Acceptance: - 100% kernel objects under MAC; sandbox breakout tests fail as expected. ### M4 — IPC & Scheduler - Asynchronous capability-addressed IPC with bounded queues and backpressure; zero-copy via pinned buffers/grant tables; priority inheritance. - Scheduler: fully preemptive O(1)/MLFQ; per-CPU runqueues; NUMA-aware; tickless idle; deadline class. - Acceptance: - Latency/throughput targets met; no starvation; priority inversion resolved. ### M5 — LimitlessFS (LFS) - Journaling or CoW; BLAKE3 checksums (metadata+data); per-inode ACLs; atomic rename/fsync; online fsck; quotas; snapshots (if CoW). - Policy integration for ACLs/xattrs. - Acceptance: - Crash consistency verified; end-to-end integrity; perf on-par or better for target workloads. ### M6 — Native Syscall ABI + vDSO - Capability-oriented syscalls: task, memory, IPC, VFS, time, event, crypto, device, policy. - Security-checked; ABI versioned; vDSO for clock/pid/tid/TLS. - Acceptance: - ABI stability tests pass; syscall audit logs complete; vDSO latency under thresholds. ### M7 — IOMMU & Core Drivers - PCIe Gen5, MSI-X, ATS/PRI, PASID; IOMMU DMA remap isolation. - NVMe 2.0 multi-queue, zoned namespaces; end-to-end DP; admin/IO path isolation. - USB 3.x/USB4 xHCI with class-policy controls. - Acceptance: - IO throughput/latency targets; IOMMU enforced isolation; error path recovery. ### M8 — Networking Stack - IPv4/IPv6 with offloads (TSO/GSO/GRO/RSS); zero-copy user rings; TCP (BBR optional); QUIC (kernel or brokered userspace). - Wi‑Fi 7 (802.11be) with MLO and regulatory enforcement. - Acceptance: - Throughput/latency comparable or better than Linux baseline on target NICs; conformance tests pass. ### M9 — Graphics (KMS/DRM) - Atomic modesetting, fbdev fallback; GEM/TTM; dma-buf sharing with MAC checks. - Acceptance: - Functional modeset on target GPUs; stable fallback; secure buffer sharing. ### M10 — Verification & Benchmarks - Unit/integration/property tests; fuzzers for syscall/VFS/net/drivers; 72h stress; suspend/resume; hotplug. - Comparative benchmarks vs Win11/macOS/Ubuntu on same hardware. - Acceptance: - All gates pass; performance/security/stability at or above benchmarks. ### M11 — Release & Maintenance - Signed releases; SBOM; security advisories; contribution/security policies; LTS/maintenance cadence. - Acceptance: - Verified artifacts; complete docs; released per policy. ## 2. Security Baseline and Hardening - Toolchain: -fstack-protector-strong, -fstrict-flex-arrays, LTO+CFI, -fvisibility=hidden. - Runtime: W^X, SMEP/SMAP, CET shadow stacks (where supported), KASLR (fine-grained), hardened slab with quarantine, RO-after-init. - Isolation: KPTI; execute-only text where feasible; brokered device/FS/net access; policy-first syscalls. - Boot: UEFI Secure Boot; TPM2 measured boot; mandatory module signing. ## 3. Build & Reproducibility - Pinned toolchains in Docker; SBOM; signed artifacts. - SOURCE_DATE_EPOCH; deterministic ISO; reproducible kernel image. - CI matrix: release + sanitizer (KASAN/UBSAN/KMSAN in test configs). ## 4. Testing and Verification Gates - Unit tests for allocators, VMM, IPC, scheduler, LFS, syscall layer. - Integration tests: boot, device init, userspace bring-up, graphics modeset. - Fuzzers: syscall, VFS (path walk, ACLs, journal), network stack, drivers. - Stress: memory pressure, IO saturation, network floods, hotplug, NMI storms. - Policy tests: MAC enforcement, sandbox breakout attempts, TOCTOU mitigation. - Benchmarks: context switch time, sysenter/exit, IOps, net latency/throughput, modeset latency. ## 5. Governance & Policies - Secure coding standard (C99/C11): no VLAs; bounds-checked APIs; strict lifetime/ownership; code review with security sign-off. - Threat modeling: STRIDE-style per subsystem; tracked risks; mitigations verified. - Change control: No new code without tests and policy coverage; no debug-only shortcuts in release. - Disclosure: Security advisories workflow; keys management with hardware-backed HSMs. ## 6. Work Breakdown Structure (WBS) and Dependencies - Early dependencies: M0 → M1/M2; M3 depends on M2; M4 depends on M3 (capabilities in IPC); M5 depends on M3 (ACLs). - Parallel tracks: M7 drivers and M8 networking can partially parallelize once M2/M3 primitives exist. - Risky tracks: Filesystem and networking—allocate extra fuzz/stress time. ## 7. Acceptance Criteria Summary - Security: 100% kernel objects under MAC; sandbox policy enforced for all syscalls; signed-only modules; W^X everywhere. - Performance: O(1)/MLFQ scheduler targets; zero-copy IPC/net on configured paths; vDSO fast paths with sub-µs latencies. - Stability: Stress and fuzz clean; lockdep/RCU clean; reproducible builds; boots across feature-gated hardware variations. ## 8. Immediate Action Items - Remove/replace userspace/action_card_stub.c. - Consolidate to kernel/production_linker.ld. - Add CI: reproducible build, SBOM, signatures, sanitizer jobs. - Draft kernel MAC policy schema and syscall ABI reference in docs/. - Start threat model documents per subsystem (docs/security/*).
