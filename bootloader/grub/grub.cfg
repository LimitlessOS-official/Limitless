# LimitlessOS v2.0.0 - GRUB2 Configuration with Installer

set timeout=15
set default=0

# Load essential modules
insmod part_gpt
insmod part_msdos  
insmod fat
insmod ext2
insmod multiboot
insmod multiboot2
insmod gfxterm

# Graphics settings
set gfxmode=auto
set gfxpayload=keep
terminal_output gfxterm

# Colors (Ubuntu-inspired)
set color_normal=white/black
set color_highlight=black/light-cyan

# Main menu entries

# GRUB Bootloader Configuration for LimitlessOS
# Production-ready boot configuration with multiple boot options,
# recovery modes, and advanced features.

# Set timeout for boot menu (in seconds)
set timeout=10

# Set default boot entry
set default=0

# Terminal configuration
if terminal_output --version >/dev/null 2>&1; then
    terminal_output console
fi
terminal_input console

# Set console colors
set color_normal=white/black
set color_highlight=black/light-gray

# LimitlessOS boot menu theme
set menu_color_normal=white/black
set menu_color_highlight=black/light-cyan

# Boot splash configuration
if loadfont unicode; then
    set gfxmode=auto
    if [ x$feature_default_font_path = xy ]; then
        font=unicode
    else
        insmod part_gpt
        insmod part_msdos
        insmod ext2
        insmod gzio
        if [ x$grub_platform = xefi ]; then
            insmod efi_gop
            insmod efi_uga
        else
            insmod vga
            insmod vbe
        fi
        insmod font
        if loadfont $prefix/fonts/unicode.pf2; then
            set gfxterm_font=unicode
            insmod gfxterm
            set gfxpayload=keep
            terminal_output gfxterm
        fi
    fi
fi

# Load required modules for LimitlessOS
insmod multiboot
insmod multiboot2
insmod part_msdos
insmod part_gpt
insmod ext2
insmod ext4
insmod fat
insmod ntfs
insmod iso9660
insmod gzio
insmod gettext

# Main LimitlessOS Boot Entry
menuentry 'LimitlessOS v1.0 Production (Infinite)' --class limitlessos --class gnu-linux --class gnu --class os {
    recordfail
    
    echo 'Loading LimitlessOS Production Kernel...'
    
    # Set root device
    search --file /boot/kernel/limitless.elf --set=root
    
    # Load kernel with production parameters
    multiboot /boot/kernel/limitless.elf root=/dev/sda1 ro quiet splash \
        init=/sbin/init console=tty0 console=ttyS0,115200n8 \
        limitless.mode=production limitless.loglevel=info \
        limitless.enable_smp=yes limitless.enable_graphics=yes \
        limitless.enable_network=yes limitless.enable_audio=yes
    
    # Load initial ramdisk with essential drivers and services
    module /boot/limitless-initrd.img initrd
    
    # Load hardware driver modules
    module /boot/drivers/real_hardware.ko real_hardware
    module /boot/drivers/network_integration.ko network
    
    # Load system services
    module /boot/services/graphics_gui.ko graphics
    module /boot/services/window_manager.ko wm
    module /boot/services/network_connectivity.ko netstack
    
    # Load development tools
    module /boot/devtools/limitless_gcc.ko compiler
    module /boot/devtools/limitless_pkg.ko pkgmgr
    
    echo 'Boot modules loaded successfully'
}

# Safe Mode Boot Entry
menuentry 'LimitlessOS v1.0 - Safe Mode' --class limitlessos --class safe --class os {
    recordfail
    
    echo 'Loading LimitlessOS in Safe Mode...'
    
    set root='hd0,msdos1'
    
    # Load kernel with safe mode parameters
    multiboot /boot/kernel/limitless.elf root=/dev/sda1 ro \
        limitless.mode=safe limitless.loglevel=debug \
        limitless.enable_smp=no limitless.enable_graphics=no \
        limitless.enable_network=no limitless.enable_audio=no \
        limitless.force_textmode=yes single
    
    # Load minimal initrd
    module /boot/limitless-initrd-minimal.img initrd
    
    # Load only essential drivers
    module /boot/drivers/essential.ko essential
    
    echo 'Safe mode boot modules loaded'
}

# Development Mode Boot Entry
menuentry 'LimitlessOS v1.0 - Development Mode' --class limitlessos --class devel --class os {
    recordfail
    
    echo 'Loading LimitlessOS Development Environment...'
    
    set root='hd0,msdos1'
    
    # Load kernel with development parameters
    multiboot /boot/kernel/limitless.elf root=/dev/sda1 rw \
        limitless.mode=development limitless.loglevel=debug \
        limitless.enable_smp=yes limitless.enable_graphics=yes \
        limitless.enable_network=yes limitless.enable_audio=yes \
        limitless.debug=yes limitless.profiling=yes
    
    # Load full development initrd
    module /boot/limitless-initrd-dev.img initrd
    
    # Load all driver modules
    module /boot/drivers/real_hardware.ko real_hardware
    module /boot/drivers/network_integration.ko network
    
    # Load development services
    module /boot/services/graphics_gui.ko graphics
    module /boot/services/window_manager.ko wm
    module /boot/services/network_connectivity.ko netstack
    
    # Load development tools with debug symbols
    module /boot/devtools/limitless_gcc_debug.ko compiler
    module /boot/devtools/limitless_pkg_debug.ko pkgmgr
    module /boot/devtools/debugger.ko debugger
    module /boot/devtools/profiler.ko profiler
    
    echo 'Development environment boot modules loaded'
}

# Recovery Mode Boot Entry
menuentry 'LimitlessOS v1.0 - Recovery Mode' --class limitlessos --class recovery --class os {
    recordfail
    
    echo 'Loading LimitlessOS Recovery Environment...'
    
    set root='hd0,msdos1'
    
    # Load kernel with recovery parameters
    multiboot /boot/kernel/limitless.elf root=/dev/sda1 ro \
        limitless.mode=recovery limitless.loglevel=debug \
        limitless.enable_smp=no limitless.enable_graphics=basic \
        limitless.enable_network=yes limitless.recovery=yes \
        init=/sbin/recovery-init emergency
    
    # Load recovery initrd with system repair tools
    module /boot/limitless-recovery.img initrd
    
    # Load essential drivers for recovery
    module /boot/drivers/essential.ko essential
    module /boot/drivers/storage.ko storage
    module /boot/drivers/network_basic.ko network
    
    # Load recovery tools
    module /boot/tools/fsck.ko fsck
    module /boot/tools/system_repair.ko repair
    module /boot/tools/backup_restore.ko backup
    
    echo 'Recovery environment boot modules loaded'
}

menuentry "Boot LimitlessOS v2.0.0 (Live Mode)" {
    echo "Loading LimitlessOS in Live mode..."
    multiboot2 /boot/kernel/limitless.elf live
    boot  
}

submenu "Advanced Options" {
    menuentry "Boot LimitlessOS - Safe Mode" {
        echo "Loading LimitlessOS in Safe Mode..."
        multiboot2 /boot/kernel/limitless.elf safe_mode
        boot
    }
    
    menuentry "Boot LimitlessOS - Console Mode" {
        echo "Loading LimitlessOS Console Mode..."
        multiboot2 /boot/kernel/limitless.elf console
        boot
    }
    
    menuentry "Boot LimitlessOS - Verbose Mode" {
        echo "Loading LimitlessOS with verbose output..."
        multiboot2 /boot/kernel/limitless.elf verbose
        boot
    }
    
    menuentry "System Information" {
        clear
        echo "======================================="
        echo "         LimitlessOS v2.0.0"
        echo "======================================="
        echo ""
        echo "Architecture: x86_64"
        echo "Boot Mode:    UEFI/Legacy BIOS"
        echo "Installer:    Available"
        echo ""
        echo "Boot Options:"
        echo "• Install - Complete system installation"
        echo "• Live Mode - Try without installing" 
        echo "• Safe Mode - Minimal drivers"
        echo "• Console - Text interface only"
        echo ""
        echo "Press any key to return to menu..."
        read
    }
}

menuentry "Memory Test" {
    echo "Starting memory test..."
    echo "This would run a memory diagnostic"
    echo "Press any key to return to menu..."
    read
}

menuentry "Reboot System" {
    echo "Restarting system..."
    reboot
}

menuentry "Power Off" {
    echo "Shutting down system..."
    halt
}
