#include "kernel.h"
#include "net/net.h"

/* Syscall entry points (wire these in your syscall table) */

typedef struct {
    u16 sin_family;
    u16 sin_port;
    struct { u32 s_addr; } sin_addr;
    u8  _z[8];
} sockaddr_in_t;

/* Domain/type/protocol constants */
#define AF_INET   2
#define SOCK_DGRAM 2
#define SOCK_RAW   3
#define IPPROTO_UDP 17
#define IPPROTO_ICMP 1

long sys_socket(int domain, int type, int protocol) {
    if (domain != AF_INET) return K_EAFNOSUPPORT;
    if (type == SOCK_DGRAM && (protocol == 0 || protocol == IPPROTO_UDP)) {
        int h = udp_socket_open();
        return (h < 0) ? h : h;
    }
    if (type == SOCK_RAW && (protocol == IPPROTO_ICMP)) {
        int h = icmp_socket_open();
        return (h < 0) ? h : h;
    }
    return K_EPROTONOSUPPORT;
}

long sys_sendto(int sock, const void* buf, size_t len, int flags,
                const void* addr, size_t addrlen) {
    (void)flags;
    if (!addr || addrlen < sizeof(sockaddr_in_t)) return K_EINVAL;
    const sockaddr_in_t* sa = (const sockaddr_in_t*)addr;
    if (sa->sin_family != AF_INET) return K_EAFNOSUPPORT;

    /* Distinguish by socket kind heuristically: try UDP first, then ICMP */
    int rc = udp_sendto(sock, buf, (u32)len, sa->sin_addr.s_addr, sa->sin_port);
    if (rc == K_EBADF) {
        rc = icmp_sendto(sock, buf, (u32)len, sa->sin_addr.s_addr);
    }
    return rc;
}

long sys_recvfrom(int sock, void* buf, size_t len, int flags,
                  void* addr, size_t* addrlen) {
    (void)flags;
    sockaddr_in_t sa; k_memset(&sa, 0, sizeof(sa));
    sa.sin_family = AF_INET;

    u32 src_ip = 0; u16 src_port = 0;
    int rc = udp_recvfrom(sock, buf, (u32)len, &src_ip, &src_port);
    if (rc == K_EBADF) {
        src_port = 0;
        rc = icmp_recvfrom(sock, buf, (u32)len, &src_ip);
    }
    if (rc < 0) return rc;

    if (addr && addrlen && *addrlen >= sizeof(sockaddr_in_t)) {
        sa.sin_addr.s_addr = src_ip;
        sa.sin_port = src_port;
        k_memcpy(addr, &sa, sizeof(sa));
        *addrlen = sizeof(sa);
    }
    return rc;
}