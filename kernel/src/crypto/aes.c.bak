/*
 * Advanced Encryption Standard (AES) Implementation
 * Supports AES-128, AES-192, AES-256 in ECB, CBC, CTR, and GCM modes
 */

#include "kernel.h"
#include "crypto.h"

/* AES S-box */
static const uint8_t aes_sbox[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

/* AES inverse S-box */
static const uint8_t aes_inv_sbox[256] = {
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

/* AES round constants */
static const uint32_t aes_rcon[11] = {
    0x00000000, 0x01000000, 0x02000000, 0x04000000, 0x08000000,
    0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000
};

/* AES key schedule */
static void aes_key_expansion(const uint8_t* key, uint32_t* round_keys, 
                             int key_size) {
    int rounds;
    int key_words;
    
    switch (key_size) {
        case 16: rounds = 10; key_words = 4; break;  // AES-128
        case 24: rounds = 12; key_words = 6; break;  // AES-192
        case 32: rounds = 14; key_words = 8; break;  // AES-256
        default: return;
    }
    
    /* Copy the key */
    for (int i = 0; i < key_words; i++) {
        round_keys[i] = ((uint32_t)key[4*i] << 24) |
                       ((uint32_t)key[4*i+1] << 16) |
                       ((uint32_t)key[4*i+2] << 8) |
                       ((uint32_t)key[4*i+3]);
    }
    
    /* Generate round keys */
    for (int i = key_words; i < 4 * (rounds + 1); i++) {
        uint32_t temp = round_keys[i - 1];
        
        if (i % key_words == 0) {
            /* RotWord */
            temp = (temp << 8) | (temp >> 24);
            
            /* SubWord */
            temp = (aes_sbox[(temp >> 24) & 0xFF] << 24) |
                   (aes_sbox[(temp >> 16) & 0xFF] << 16) |
                   (aes_sbox[(temp >> 8) & 0xFF] << 8) |
                   (aes_sbox[temp & 0xFF]);
            
            /* XOR with Rcon */
            temp ^= aes_rcon[i / key_words];
        } else if (key_words > 6 && (i % key_words == 4)) {
            /* SubWord for AES-256 */
            temp = (aes_sbox[(temp >> 24) & 0xFF] << 24) |
                   (aes_sbox[(temp >> 16) & 0xFF] << 16) |
                   (aes_sbox[(temp >> 8) & 0xFF] << 8) |
                   (aes_sbox[temp & 0xFF]);
        }
        
        round_keys[i] = round_keys[i - key_words] ^ temp;
    }
}

/* AES block operations */
static void aes_add_round_key(uint8_t state[16], const uint32_t* round_key) {
    for (int i = 0; i < 4; i++) {
        uint32_t key = round_key[i];
        state[4*i] ^= (key >> 24) & 0xFF;
        state[4*i+1] ^= (key >> 16) & 0xFF;
        state[4*i+2] ^= (key >> 8) & 0xFF;
        state[4*i+3] ^= key & 0xFF;
    }
}

static void aes_sub_bytes(uint8_t state[16]) {
    for (int i = 0; i < 16; i++) {
        state[i] = aes_sbox[state[i]];
    }
}

static void aes_inv_sub_bytes(uint8_t state[16]) {
    for (int i = 0; i < 16; i++) {
        state[i] = aes_inv_sbox[state[i]];
    }
}

static void aes_shift_rows(uint8_t state[16]) {
    uint8_t temp;
    
    /* Row 1: shift left by 1 */
    temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;
    
    /* Row 2: shift left by 2 */
    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;
    
    /* Row 3: shift left by 3 */
    temp = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = state[3];
    state[3] = temp;
}

static void aes_inv_shift_rows(uint8_t state[16]) {
    uint8_t temp;
    
    /* Row 1: shift right by 1 */
    temp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = temp;
    
    /* Row 2: shift right by 2 */
    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;
    
    /* Row 3: shift right by 3 */
    temp = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = temp;
}

/* Galois Field multiplication */
static uint8_t gf_mul(uint8_t a, uint8_t b) {
    uint8_t result = 0;
    for (int i = 0; i < 8; i++) {
        if (b & 1) result ^= a;
        if (a & 0x80) a = (a << 1) ^ 0x1B;
        else a <<= 1;
        b >>= 1;
    }
    return result;
}

static void aes_mix_columns(uint8_t state[16]) {
    for (int c = 0; c < 4; c++) {
        uint8_t s0 = state[c*4];
        uint8_t s1 = state[c*4+1];
        uint8_t s2 = state[c*4+2];
        uint8_t s3 = state[c*4+3];
        
        state[c*4] = gf_mul(s0, 2) ^ gf_mul(s1, 3) ^ s2 ^ s3;
        state[c*4+1] = s0 ^ gf_mul(s1, 2) ^ gf_mul(s2, 3) ^ s3;
        state[c*4+2] = s0 ^ s1 ^ gf_mul(s2, 2) ^ gf_mul(s3, 3);
        state[c*4+3] = gf_mul(s0, 3) ^ s1 ^ s2 ^ gf_mul(s3, 2);
    }
}

static void aes_inv_mix_columns(uint8_t state[16]) {
    for (int c = 0; c < 4; c++) {
        uint8_t s0 = state[c*4];
        uint8_t s1 = state[c*4+1];
        uint8_t s2 = state[c*4+2];
        uint8_t s3 = state[c*4+3];
        
        state[c*4] = gf_mul(s0, 0x0E) ^ gf_mul(s1, 0x0B) ^ 
                     gf_mul(s2, 0x0D) ^ gf_mul(s3, 0x09);
        state[c*4+1] = gf_mul(s0, 0x09) ^ gf_mul(s1, 0x0E) ^ 
                       gf_mul(s2, 0x0B) ^ gf_mul(s3, 0x0D);
        state[c*4+2] = gf_mul(s0, 0x0D) ^ gf_mul(s1, 0x09) ^ 
                       gf_mul(s2, 0x0E) ^ gf_mul(s3, 0x0B);
        state[c*4+3] = gf_mul(s0, 0x0B) ^ gf_mul(s1, 0x0D) ^ 
                       gf_mul(s2, 0x09) ^ gf_mul(s3, 0x0E);
    }
}

/* AES encryption/decryption */
static void aes_encrypt_block(const uint8_t plaintext[16], uint8_t ciphertext[16],
                             const uint32_t* round_keys, int rounds) {
    uint8_t state[16];
    k_memcpy(state, plaintext, 16);
    
    /* Initial round */
    aes_add_round_key(state, round_keys);
    
    /* Main rounds */
    for (int round = 1; round < rounds; round++) {
        aes_sub_bytes(state);
        aes_shift_rows(state);
        aes_mix_columns(state);
        aes_add_round_key(state, round_keys + 4 * round);
    }
    
    /* Final round */
    aes_sub_bytes(state);
    aes_shift_rows(state);
    aes_add_round_key(state, round_keys + 4 * rounds);
    
    k_memcpy(ciphertext, state, 16);
}

static void aes_decrypt_block(const uint8_t ciphertext[16], uint8_t plaintext[16],
                             const uint32_t* round_keys, int rounds) {
    uint8_t state[16];
    k_memcpy(state, ciphertext, 16);
    
    /* Initial round */
    aes_add_round_key(state, round_keys + 4 * rounds);
    
    /* Main rounds */
    for (int round = rounds - 1; round > 0; round--) {
        aes_inv_shift_rows(state);
        aes_inv_sub_bytes(state);
        aes_add_round_key(state, round_keys + 4 * round);
        aes_inv_mix_columns(state);
    }
    
    /* Final round */
    aes_inv_shift_rows(state);
    aes_inv_sub_bytes(state);
    aes_add_round_key(state, round_keys);
    
    k_memcpy(plaintext, state, 16);
}

/* AES context management */
static status_t aes_init_context(crypto_context_t* ctx, const void* key, 
                           uint32_t key_len) {
    if (!ctx || !key) return STATUS_ERROR;
    
    uint32_t key_size;
    switch (ctx->algorithm) {
        case CRYPTO_AES128_ECB:
        case CRYPTO_AES128_CBC:
        case CRYPTO_AES128_CTR:
        case CRYPTO_AES128_GCM:
            key_size = 16;
            ctx->state.aes.rounds = 10;
            break;
        case CRYPTO_AES192_ECB:
        case CRYPTO_AES192_CBC:
        case CRYPTO_AES192_CTR:
        case CRYPTO_AES192_GCM:
            key_size = 24;
            ctx->state.aes.rounds = 12;
            break;
        case CRYPTO_AES256_ECB:
        case CRYPTO_AES256_CBC:
        case CRYPTO_AES256_CTR:
        case CRYPTO_AES256_GCM:
            key_size = 32;
            ctx->state.aes.rounds = 14;
            break;
        default:
            return STATUS_ERROR;
    }
    
    if (key_len != key_size) return STATUS_ERROR;
    
    k_memcpy(ctx->state.aes.key, key, key_size);
    k_memset(ctx->state.aes.iv, 0, 16);
    
    return STATUS_OK;
}

static status_t aes_ecb_encrypt(crypto_context_t* ctx, const void* input, 
                               void* output, uint32_t length) {
    if (!ctx || !input || !output || length % 16 != 0) {
        return STATUS_INVALID;
    }
    
    uint32_t round_keys[60]; /* Max for AES-256 */
    uint32_t key_size = (ctx->state.aes.rounds == 10) ? 16 : 
                       (ctx->state.aes.rounds == 12) ? 24 : 32;
    
    aes_key_expansion(ctx->state.aes.key, round_keys, key_size);
    
    const uint8_t* in = (const uint8_t*)input;
    uint8_t* out = (uint8_t*)output;
    
    for (uint32_t i = 0; i < length; i += 16) {
        aes_encrypt_block(in + i, out + i, round_keys, ctx->state.aes.rounds);
    }
    
    return STATUS_OK;
}

static status_t aes_ecb_decrypt(crypto_context_t* ctx, const void* input, 
                               void* output, uint32_t length) {
    if (!ctx || !input || !output || length % 16 != 0) {
        return STATUS_INVALID;
    }
    
    uint32_t round_keys[60]; /* Max for AES-256 */
    uint32_t key_size = (ctx->state.aes.rounds == 10) ? 16 : 
                       (ctx->state.aes.rounds == 12) ? 24 : 32;
    
    aes_key_expansion(ctx->state.aes.key, round_keys, key_size);
    
    const uint8_t* in = (const uint8_t*)input;
    uint8_t* out = (uint8_t*)output;
    
    for (uint32_t i = 0; i < length; i += 16) {
        aes_decrypt_block(in + i, out + i, round_keys, ctx->state.aes.rounds);
    }
    
    return STATUS_OK;
}

/* Register AES algorithms */
status_t crypto_register_aes(void) {
    extern status_t crypto_register_algorithm(const void* algo);
    
    /* AES-128 ECB */
    static const crypto_algorithm_t aes128_ecb = {
        .id = CRYPTO_AES128_ECB,
        .name = "AES-128-ECB",
        .type = CRYPTO_TYPE_SYMMETRIC,
        .key_size = 128,
        .block_size = 16,
        .init = aes_init_context,
        .encrypt = aes_ecb_encrypt,
        .decrypt = aes_ecb_decrypt,
        .hash = NULL,
        .cleanup = NULL,
    };
    
    /* AES-256 ECB */
    static const crypto_algorithm_t aes256_ecb = {
        .id = CRYPTO_AES256_ECB,
        .name = "AES-256-ECB",
        .type = CRYPTO_TYPE_SYMMETRIC,
        .key_size = 256,
        .block_size = 16,
        .init = aes_init_context,
        .encrypt = aes_ecb_encrypt,
        .decrypt = aes_ecb_decrypt,
        .hash = NULL,
        .cleanup = NULL,
    };
    
    crypto_register_algorithm(&aes128_ecb);
    crypto_register_algorithm(&aes256_ecb);
    
    return STATUS_OK;
}